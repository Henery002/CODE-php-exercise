/*
* TODO 网易云课堂-后盾网向军PHP视频教程
* 2017.09.25起笔记
* NANJING
*/

<2-04> 数据类型（一）
1.标量类型：
	1.整型(int)
	2.浮点型(float)
	3.字符串型(string)
	4.布尔型(boolean)
2.复合类型：
	1.数组(array)
	2.对象(object)
3.其他类型：
	1.资源(resource)
	2.NULL

4.定界符
	Heredoc技术。可用来输出大段的html和javascript脚本
	1.PHP定界符的作用就是按照原样，包括换行格式什么的，输出在其内部的东西；
	2.在PHP定界符中的任何特殊字符都不需要转义； 
	3.PHP定界符中的PHP变量会被正常的用其值来替换。
	[注意]：
		1.以 <<<End 开始标记开始，以End结束标记结束，**结束标记必须顶头写**，不能有缩进和空格，且在结束标记末尾要有分号；
		2.开始标记和开始标记相同，比如常用大写的EOT、EOD、EOF来表示，但是不只限于那几个，只要保证开始标记和结束标记不在正文中出现即可；
		3.位于开始标记和结束标记之间的变量可以被正常解析，但是函数则不可以。在heredoc中，变量不需要用连接符.或,来拼接。
	[参考文章]：
		CSDN:http://blog.csdn.net/u013372487/article/details/51883177
	[例]：
		06.php

<2-05> 数据类型（二）
1.布尔类型
	[例]：
		07.php 07.html
2.数组
3.对象
4.资源
5.NULL
...

<2-06> 数据类型（三）
	php是弱类型语言
1.getType(变量/常量)		//检测数据类型，返回数据类型名
2.is_int();					//返回值为布尔类型
3.is_float();
4.is_string();
5.is_array();
6.is_object();
7.is_resource();
8.is_bool();
...
	[例]：08.php

<2-07> 类型转换 外部变量
1.自由转换
2.强制转换					//转换之后不会改变原变量，只是复制了原变量
	1.$b = (int)$a;
	2.$b = (string)$a;
	3.$b = (array)$a;
	[注]：不修改原变量
3.setType($a,'string');		//setType()方法接收两个参数，分别定义被转换的数组、转换成的数据类型
	[注]：直接修改原变量	
4.具体的转换函数			//只针对标量类型变量(int/float/string)，无法转换对象/数组
	1.intval();				
		=> $b = intval($a);
	2.floatval();
	3.strval();
	[注]：
		1.无 arrayval() 方法
		2.对象/数组 类型变量无法被转换：Object of class user could not be converted to string
	[例]：09.php

<2-08> 运算符（一）
<2-09> 运算符（二）
<2-10> 运算符（三）
<2-11> 运算符（四）
<2-12> 运算符（五）
1.算数运算符
	+	-	*	/	%
2.递增/递减运算符
	1.$a++
	2.$a--
	3.++$a
	4.--$a
3.比较运算符
	>	<	==	===   >=	<=	!=	!==		?:	
4.逻辑运算符
	1.逻辑与	and / &&
	2.逻辑或	or  / ||
	3.逻辑非	not / !
	4.逻辑异或	xor
		[注]：当左右表达式只有一个为真，返回真。其余情况均返回假
		[例]：
			1.true xor true				//false
			2.true xor false			//true
			3.false xor false 			//false
5.位运算符
	1.按位与	&
		[注]：当左右两边的数转换为二进制后按位同位都为1时，则返回1，否则返回0。最后返回的结果是十进制数
		[注]：进制转换方法：
			1.decin($a);				//将$a转换为二进制
			2.base_convert($a,10,2);	//将$a由十进制转换为二进制
	2.按位或	|
		[注]：只有当同位都为0，才返回0，否则返回1
	3.按位异或	^
		[注]：只有当同位不同时，才返回1，否则返回0
	4.按位非	~
		[注]：将位中的1变为0，0变为1
6.位移运算符
	1.左移		<<
		[注]：将左边数的二进制位左移右边数指定数量的位，右边空位补0
	2.右移		>>
		[注]：将左边数的二进制位右移右边数指定数量的位，左边空位补0
		[例]：11.php
7.连接运算符
	1. .		//连接两个参数生成新的字符串
	2. .=		//把右边的值追加到左边的变量
8.赋值运算符
	1. =		//把右边值赋值给左边变量
9.禁止显示警告信息
	1. @		//放在函数、变量前，用以禁止显示系统报错的信息，不可以放于条件结构语句中，一般放置在有返回值的地方
10.三元表达式/三目运算符
	1. 表达式1 ? 表达式2 : 表达式3
11.短路运算符/运算符的短路逻辑
	1.逻辑与	&& / and
	2.逻辑或 	|| / or

<2-13> 流程控制（一）
<2-14> 流程控制（二）
<2-15> 流程控制（三）
<2-16> 流程控制（四）
<2-17> 流程控制（五）
1.if(){...}
2.switch(){...}
3.while(){...}
	[例]：2-13-while.php	乘法口诀表
4.do{...}while()
5.for(){...}
6.break;					//终止循环
  break n;					//终止n层循环				
7.continue;					//跳出当前循环体(即不继续执行continue后面的语句)，返回到当前循环体头部继续执行
  continue n;				//跳出n层循环
8.exit / exit('退出');		//终止整个脚本的运行(即不再执行exit之后的脚本)
  die / die('退出');
  [注]：exit / die 意义和用法均相同

<2-18> FUNCTION函数（一）
<2-19> FUNCTION函数（二）
<2-20> FUNCTION函数（三）
1.静态变量
	static $aaa;
2.按值传递 / 按址传递	function fun(&$variable){...}
	[例]：$name = '...';
		function fun3($name){
			$name = $name.'按值传递';
			echo $name;
		}
		function fun4(&$name){
			$name = $name.'按址传递';
		}
		fun3();	//函数fun3中按值传递时，不会改变函数外部变量的值
		fun4();	//函数fun4中按址传递时，会将外部变量一起改变
		echo $name;	

3.function_exists('funName');	//检测函数是否已定义。返回布尔值
4.func_get_args();				//接收函数传递的实参数组
5.func_get_arg(n);				//获取第n个参数，序号从0开始			
6.func_num_args();				//获取参数的个数
	[例]：2-19.php
7.变量函数
	[注]：在变量后加()，系统会自动查找与变量值同名的函数去执行
8.递归调用
	[注]：在函数体内调用本函数自己
9.内部函数
	[注]：在函数体内定义函数

<2-21> 代码重用
1.载入文件
	1.include()			//若文件不存在，提示警告性错误，不影响后续程序运行
	2.require()			//若文件不存在，致命性错误，后续程序终止运行
	3.include_once()	//只载入一次文件，若已载入，则不再载入
	4.require_once()

<3-01> 定义字符串

<3-02> 字符串处理函数（一）
---------------------------[3-02.php]---------------------------
1.处理字符串的空格
	1.trim()			//trim($name);
	2.ltrim()
	3.rtrim()
2.字符串长度
	1.strlen()		//strlen(trim($name));
3.处理字符串大小写
	1.strtolower()	//将字符串转换成小写
	2.strtoupper()	//将字符串转换成大写
	3.ucfirst()		//首字母大写
	4.ucwords()		//单词首字母大写
4.字符串填充函数
	1.str_pad('字符串',填充后字符串总长度,'填充的内容',填充方向)
		[注]：填充方向(缺省时则默认向左侧填充)：
		1.STR_PAD_BOTH	//左右两侧填充，如果填充内容长度为奇数，右侧多填
		2.STR_PAD_LEFT	//左侧填充
		3.STR_PAD_RIGHT	//右侧填充
5.字符串翻转函数
	1.strrev()		//颠倒字符串顺序
6.md5加密
	1.md5()
7.格式化金额字符串函数
	1.number_format('字符串',小数位数[,小数点类型,千位分隔符]);
	[例]：number_format('1258090',3);			//1,258,090.000
		  number_format('1258090',3,'|','+');	//1+258+090|000
8.将字符串拆分成数组
	1.explode('以哪个字符串进行拆分','被拆分的字符串',返回拆分后数组元素的个数);
	[例]：print_r(explode(',',$str,2));
9.将数组元素拼接成字符串
	1.implode(['字符串连接符',]数组);
	[例]：print_r(implode('_',$array));
---------------------------[3-03.php]---------------------------
10.字符串输出
	1.echo ();		//输出一个或多个字符串
	2.print();		//输出字符串，不能同时输出多个
	3.printf("%.2f",$num);		//格式化输入字符串
	[注]：1.%f 	//浮点型
		  2.%u 	//整型
11.字符串截取
	1.substr($str,starti,length);	//对字符串进行指定数量的截取
	[注]：PHP中，utf-8 编码时，一个汉字占3个字节
12.字符串查找
	1.strchr($str,'abc');		//查找abc在$str中第一次出现的位置返回该位置直至结尾处的字符串
		[注]：区分大小写，若查找不到，则返回 bool(false)
	2.strstr($str,'abc');		//同strchar作用完全相同
	3.stristr($str,'AbC');		//不区分大小写
		[注]：不区分大小写
	4.strrchr($str,'abc');		//查找abc在$str中最后一次出现的位置返回该位置直至结尾处的字符串 
	5.strpos($str,'abC');		//查找abC在$str中第一次出现的位置，返回的是 位置索引
		[注]：区分大小写
	6.stripos($str,'Abc');		//作用同strpos
		[注]：不区分大小写
	7.strrpos($str,'abc');		//从后往前查找abc在$str中第一次出现的位置，返回 索引

13.标记分割字符串
	1.strtok($str,$token);		//通过字符串把主字符串进行拆分
	2.strtok($token);
	[注]：
		1.将字符串$str以字符$token分割成子字符串。
		2.注意仅第一次调用 strtok 函数时使用 string 参数。后来每次调用 strtok，都将只使用 token 参数，因为它会记住它在字符串 string 中的位置。
14.将字符串解析为变量
	1.parse_str($str);			//无返回值
15.将字符串分割成小块
	1.chunk_split($str,number,$token);			//把字符串按指定大小拆分
	[注]：将字符串$str以每number字节拆分，并用$token连接
---------------------------[3-04.php]---------------------------
16.字符串/数组替换
	1.str_replace($search,$replace,$str[,$k]);	//区分大小写
	2.str_ireplace($search,$replace,$str[,$k]);	//不区分大小写
	[注]：返回替换后的新字符串/数组，$k用于统计替换的次数，可直接输出 echo $k;
17.字符串比较函数
	1.strcmp($str1,$str2);		//如果 str1 小于 str2，返回 -1；如果 str1 大于 str2，返回 1；二者相等则返回 0 
	[注]：区分大小写
	2.strcasecmp($str1,$str2);	//
	[注]：不区分大小写
	3.strnatcmp($str1,$str2);	//按自然数进行字符串比较
	[例]：
		1.strcmp('10','2');			//-1
		2.strnatcmp('10','2');		//1
	4.strncmp($str1,$str2,n);	//按指定位数进行字符串的比较
	5.similar_text($str1,$str2[,$percent]);		//计算两个字符串的相似度
	[注]：返回在两个字符串中匹配字符的数目。第三个参数返回的是相似度百分比
	[例]：
		1.echo similar_text('houdun','hundou');		//4
18.转换字符串中指定的字符
	1.strtr($str,$strfrom,$strto);		//将$str中的$strfrom替换为$strto
	2.strtr($str,$array_replace);		//指定替换的数组，效果相同
	[例]：3-04.php
19.字符串统计函数/计算字符串出现的次数
	1.substr_count($str,$search[,$starti[,$length]]);		//返回值为 整型
	[注]：返回子字符串search在字符串$str中出现的次数。注意 $search 区分大小写。 
		第三个参数指定查找起始位置，第四个参数指定查找的长度
---------------------------[3-05.php]---------------------------
20.解析URL并返回其组成部分
	1.parse_url($url[,$component]);		//解析$url并返回一个关联数组，包含在 URL 中出现的各种组成部分
	[注]：第二个参数用于获取url中指定部分的string
		1.print_f(parse_url($url));		//返回一个关联数组
		2.echo parse_url($url,PHP_URL_PATH);	//返回一个string
	[注]：$component参数可取值：
		1.PHP_URL_SCHEME
		2.PHP_URL_HOST
		3.PHP_URL_USER
		4.PHP_URL_PORT
		5.PHP_URL_PASS
		6.PHP_URL_PATH
		7.PHP_URL_QUERY
		8.PHP_URL_FRAGMENT
21.编码/解码URL字符串
	1.urlencode($str);		//
	2.urldecode($str);
22.将字符串转换为HTML实体
	1.htmlentities($str[,$flags]);
	[注]：第二个参数$flags可取值为：
		1.ENT_COMPAT		//只转换双引号
		2.ENT_QUOTES		//转换单双引号
		3.ENT_IGNORE		//不转换引号
		4....
	2.htmlspecialchars($str[,$flags]);
23.将已转为HTML实体的内容转换为字符串
	1.htmlspecialchars_decode($str);
---------------------------[3-06.php]---------------------------
24.使用反斜杠引用字符串
	1.addslashes($str);			//在预定义字符串前添加反斜杠
	2.get_magic_quotes_gpc();	//获取 PHP.INI 中是否开启自动转义
	[注]：如果 magic_quotes_gpc 为关闭时返回 0，否则返回 1。在 PHP 5.4.O 起将始终返回 FALSE
	3.stripslashes($str);		//把转义字符串前的反斜杠删除
---------------------------[3-07.php]---------------------------
25.获得在系统配置文件中是否设置了对读取外部文件进行转义
	1.get_magin_quotes_runtime();





<3-03> 字符串处理函数（二）

<3-04> 字符串处理函数（三）

<3-05> 字符串处理函数（四）

<3-06> 字符串处理函数（五）

<3-07> 字符串处理函数（六）






